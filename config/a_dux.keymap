/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

// Layers
#define BASE 0
#define NAV  1
#define NUM  2
#define FUNC 3

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        dotcom: dot_coma {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp KP_DOT>, <&kp KP_COMMA>;
            mods = <MOD_LSFT>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
                &kp Q      &kp W      &kp E       &kp R       &kp T            &kp Y   &kp U       &kp I       &kp O      &kp P
                &hm LGUI A &hm LALT S &hm LCTRL D &hm LSHFT F &kp G            &kp H   &hm RSHFT J &hm RCTRL K &hm RALT L &hm RGUI SEMI
                &kp Z      &kp X      &kp C       &kp V       &kp B            &kp N   &kp M       &kp COMMA   &kp DOT    &lt NUM SLASH
                                           &lt FUNC TAB     &kp SPACE       &lt NAV ENTER   &kp BSPC
            >;
        };

        nav_layer {
            bindings = <
                &none     &none      &kp TILDE  &none      &none          &none     &none     &none     &none     &none
                &kp LGUI  &kp LALT   &kp LCTRL  &kp LSHIFT &none          &none     &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT
                &none     &none      &none      &none      &none          &none     &none     &none     &none     &none
                                               &none      &kp SPACE       &lt NAV ENTER  &kp DEL
            >;
        };

        num_layer {
            bindings = <
                &none     &none      &none      &none       &none          &kp EQUAL   &kp N7     &kp N8     &kp N9     &none
                &kp LGUI  &kp LALT   &kp LCTRL  &kp LSHIFT  &dotcom        &kp MINUS   &kp N4     &kp N5     &kp N6     &none
                &none     &none      &none      &none       &none          &kp N0      &kp N1     &kp N2     &kp N3     &lt NUM SLASH
                                               &none        &none          &hm RSHIFT SQT  &dotcom
            >;
        };

        func_layer {
            bindings = <
                &none     &kp C_PREV &kp C_PP   &kp C_NEXT  &kp C_VOL_UP          &kp ESC   &kp F7     &kp F8     &kp F9     &kp F12
                &kp LGUI  &kp LALT   &kp LCTRL  &kp LSHIFT  &kp C_VOL_DN          &none     &kp F4     &kp F5     &kp F6     &kp F11
                &none     &none      &none      &none       &none                 &none     &kp F1     &kp F2     &kp F3     &kp F10
                                            &lt FUNC TAB   &none                 &none      &kp DEL
            >;
        };
    };
};
